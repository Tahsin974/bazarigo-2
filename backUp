import { useMemo, useRef, useState } from "react";
import {
  buildInventoryFromProducts,
  samplePayments,
} from "./SellerHelpers/SellerHelpers";
import * as XLSX from "xlsx";
import Sidebar from "../../../components/Sidebar/Sidebar";
import DashboardView from "./views/DashboardView";
import ProductsView from "./views/ProductsView";
import OrdersView from "./views/OrdersView";
import InventoryView from "./views/InventoryView";
import PaymentsView from "./views/PaymentsView";
import ReportsView from "./views/ReportsView";
import SettingsView from "./views/SettingsView";
import Drawer from "../../../components/Drawer/Drawer";
import EditProfileModal from "../../../components/EditProfileModal/EditProfileModal";
import MyProfileView from "../../../components/MyProfileView/MyProfileView";
import ProductModal from "../../../components/ProductModal/ProductModal";
import {
  sampleOrders,
  sampleProducts,
  sampleReturns,
} from "../../../Utils/Helpers/Helpers";
import ExportBtn from "../../../components/ui/ExportBtn";

export default function SellerPanelDashboard() {
  const [user, setUser] = useState({
    name: "রাহিম উদ্দিন",
    email: "rahim@example.com",
    phone: "01712345678",
    avatar: "https://placehold.co/400x400/FF0055/ffffff?text=Wristwatch",
    role: "seller",
  });
  // --- Navigation + global data ---
  const [active, setActive] = useState("Dashboard");

  const [showEditProfile, setShowEditProfile] = useState(false);

  // Core data
  const [products, setProducts] = useState(sampleProducts());
  const [displayProducts, setDisplayProducts] = useState(products);
  const [orders, setOrders] = useState(sampleOrders());
  const [returns, setReturns] = useState(sampleReturns());
  const [inventory, setInventory] = useState(
    buildInventoryFromProducts(displayProducts)
  );
  const [displayInventory, setDisplayInventory] = useState(inventory);
  const [payments] = useState(samplePayments());
  const fileRef = useRef(null);

  // Product UI state
  const [productModalOpen, setProductModalOpen] = useState(false);
  const [editingProduct, setEditingProduct] = useState(null);
  const [selectedProductIds, setSelectedProductIds] = useState([]);

  // Products filters/pagination
  const [productSearch, setProductSearch] = useState("");
  const [productSort, setProductSort] = useState("name");
  const [productPage, setProductPage] = useState(1);
  const productPageSize = 6;

  // Orders filters/pagination
  const [orderSearch, setOrderSearch] = useState("");
  const [orderSort, setOrderSort] = useState("customer");
  const [orderPage, setOrderPage] = useState(1);
  const orderPageSize = 6;
  const [selectedOrderIds, setSelectedOrderIds] = useState([]);

  const [returnOrderSearch, setReturnOrderSearch] = useState("");
  const [returnOrderPage, setReturnOrderPage] = useState(1);
  const returnOrderPageSize = 6;

  // Payments filters/pagination
  const [paymentSearch, setPaymentSearch] = useState("");
  const [paymentSort, setPaymentSort] = useState("date");
  const [paymentPage, setPaymentPage] = useState(1);
  const paymentPageSize = 5;

  // inventory filters/pagination
  const [inventorySearch, setInventorySearch] = useState("");
  const [inventorySort, setInventorySort] = useState("name");
  const [inventoryPage, setInventoryPage] = useState(1);
  const inventoryPageSize = 6;

  // Reports filters (status + date range)
  const [reportFilter, setReportFilter] = useState("all");
  const [startDate, setStartDate] = useState("");
  const [endDate, setEndDate] = useState("");

  // Settings state (Payment settings split)
  const [bankSettings, setBankSettings] = useState({
    bankName: "",
    accountNumber: "",
    routingNumber: "",
  });
  const [bdSettings, setBdSettings] = useState({
    bkash: "",
    nagad: "",
    rocket: "",
  });
  const [profile, setProfile] = useState({
    shopName: "",
    email: "",
    phone: "",
  });
  const [notifications, setNotifications] = useState({
    orderAlerts: true,
    paymentAlerts: true,
    weeklyReports: false,
  });

  // Security state
  const [oldPasswordStored] = useState("old-password-stub"); // stub - in real app fetch from server
  const [oldPassword, setOldPassword] = useState("");
  const [newPassword, setNewPassword] = useState("");
  const [confirmPassword, setConfirmPassword] = useState("");
  const [twoFA, setTwoFA] = useState("Disabled");
  const [loginAlert, setLoginAlert] = useState("Disabled");

  // --- Derived lists ---
  const filteredProducts = useMemo(() => {
    let data = [...displayProducts];
    if (productSearch) {
      const q = productSearch.toLowerCase();
      data = data.filter(
        (p) =>
          (p.name || "").toLowerCase().includes(q) ||
          (p.category || "").toLowerCase().includes(q)
      );
    }
    if (productSort === "price")
      data.sort((a, b) => (a.price || 0) - (b.price || 0));
    else if (productSort === "stock")
      data.sort((a, b) => (a.stock || 0) - (b.stock || 0));
    else data.sort((a, b) => (a.name || "").localeCompare(b.name || ""));
    return data;
  }, [displayProducts, productSearch, productSort]);

  const paginatedProducts = filteredProducts.slice(
    (productPage - 1) * productPageSize,
    productPage * productPageSize
  );
  const filteredInventory = useMemo(() => {
    let data = [...displayInventory];
    if (inventorySearch) {
      const q = inventorySearch.toLowerCase();
      data = data.filter((p) => (p.name || "").toLowerCase().includes(q));
    } else if (inventorySort === "stock")
      data.sort((a, b) => (a.stock || 0) - (b.stock || 0));
    else data.sort((a, b) => (a.name || "").localeCompare(b.name || ""));
    return data;
  }, [displayInventory, inventorySearch, inventorySort]);

  const paginatedInventory = filteredInventory.slice(
    (inventoryPage - 1) * inventoryPageSize,
    inventoryPage * inventoryPageSize
  );

  const filteredOrders = useMemo(() => {
    let data = [...orders];
    if (orderSearch) {
      const q = orderSearch.toLowerCase();
      data = data.filter(
        (o) =>
          (o.number || "").toLowerCase().includes(q) ||
          (o.customer || "").toLowerCase().includes(q)
      );
    }
    if (orderSort === "total")
      data.sort((a, b) => (a.total || 0) - (b.total || 0));
    else
      data.sort((a, b) => (a.customer || "").localeCompare(b.customer || ""));
    return data;
  }, [orders, orderSearch, orderSort]);

  const paginatedOrders = filteredOrders.slice(
    (orderPage - 1) * orderPageSize,
    orderPage * orderPageSize
  );

  const filteredReturnOrders = useMemo(() => {
    let data = [...returns];
    if (returnOrderSearch) {
      const q = returnOrderSearch.toLowerCase();
      data = data.filter(
        (o) =>
          (o.id || "").toLowerCase().includes(q) ||
          (o.status || "").toLowerCase().includes(q) ||
          (o.customer || "").toLowerCase().includes(q)
      );
    }
    data.sort((a, b) => (a.date || "").localeCompare(b.date || ""));
    return data;
  }, [returns, returnOrderSearch]);

  const paginatedReturnOrders = filteredReturnOrders.slice(
    (returnOrderPage - 1) * returnOrderPageSize,
    returnOrderPage * returnOrderPageSize
  );

  const filteredPayments = useMemo(() => {
    let data = [...payments];
    if (paymentSearch) {
      const q = paymentSearch.toLowerCase();
      data = data.filter(
        (p) =>
          (p.method || "").toLowerCase().includes(q) ||
          (p.status || "").toLowerCase().includes(q)
      );
    }
    if (paymentSort === "amount") data.sort((a, b) => a.amount - b.amount);
    else if (paymentSort === "status")
      data.sort((a, b) => a.status.localeCompare(b.status));
    else data.sort((a, b) => new Date(b.date) - new Date(a.date));
    return data;
  }, [payments, paymentSearch, paymentSort]);

  const paginatedPayments = filteredPayments.slice(
    (paymentPage - 1) * paymentPageSize,
    paymentPage * paymentPageSize
  );

  const filteredOrdersForReport = useMemo(() => {
    let data = [...orders];
    if (reportFilter === "Processing")
      data = data.filter((o) => o.status === "Processing");
    if (reportFilter === "Shipped")
      data = data.filter((o) => o.status === "Shipped");
    if (reportFilter === "Out for Delivery")
      data = data.filter((o) => o.status === "Out for Delivery");
    if (reportFilter === "Delivered")
      data = data.filter((o) => o.status === "Delivered");
    if (startDate)
      data = data.filter((o) => new Date(o.date) >= new Date(startDate));
    if (endDate)
      data = data.filter((o) => new Date(o.date) <= new Date(endDate));
    return data;
  }, [orders, reportFilter, startDate, endDate]);

  // --- Handlers & helpers ---
  const openNewProductModal = () => {
    setEditingProduct({
      id: null,
      name: "",
      price: "",
      category: "Fashion",
      description: "",
      stock: 0,
      images: [],
      extras: {},
    });
    setProductModalOpen(true);
  };

  const openEditProductModal = (p) => {
    setEditingProduct({ ...p });
    setProductModalOpen(true);
  };
  const saveProduct = (product) => {
    if (!product.name) return alert("Product name required");
    if (product.id) {
      setProducts((ps) => ps.map((x) => (x.id === product.id ? product : x)));
      setDisplayProducts((ps) =>
        ps.map((x) => (x.id === product.id ? product : x))
      );
    } else {
      product.id = `p_${Date.now()}`;
      setProducts((ps) => [product, ...ps]);
      setDisplayProducts((ps) => [product, ...ps]);
    }
    setProductModalOpen(false);
  };
  // function saveProduct() {
  //   if (!productForm.name || !productForm.price)
  //     return alert("Name and price required");
  //   if (editingProduct) {
  //     setProducts((prev) =>
  //       prev.map((x) =>
  //         x.id === editingProduct.id ? { ...x, ...productForm } : x
  //       )
  //     );
  //   } else {
  //     const newP = { id: Date.now().toString(), ...productForm };
  //     setProducts((prev) => [newP, ...prev]);
  //   }
  //   setProductModalOpen(false);
  // }

  function toggleSelectProduct(id) {
    setSelectedProductIds((s) =>
      s.includes(id) ? s.filter((x) => x !== id) : [...s, id]
    );
  }
  function bulkDeleteProducts() {
    if (!selectedProductIds.length) return alert("No products selected");
    if (!confirm(`Delete ${selectedProductIds.length} products?`)) return;
    setProducts((p) => p.filter((x) => !selectedProductIds.includes(x.id)));
    setDisplayProducts((p) =>
      p.filter((x) => !selectedProductIds.includes(x.id))
    );
    setSelectedProductIds([]);
  }

  function toggleSelectOrder(id) {
    setSelectedOrderIds((s) =>
      s.includes(id) ? s.filter((x) => x !== id) : [...s, id]
    );
  }

  // Bulk upload

  const handleBulkUpload = (event) => {
    const file = event.target.files[0];

    if (!file) return alert("Please select an Excel file first.");

    try {
      const reader = new FileReader();

      reader.onload = (e) => {
        try {
          const data = new Uint8Array(e.target.result);
          const workbook = XLSX.read(data, { type: "array" });

          const sheetName = workbook.SheetNames[0];
          const sheet = workbook.Sheets[sheetName];

          const jsonData = XLSX.utils.sheet_to_json(sheet, { defval: "" });

          const processedData = jsonData.map((item) => ({
            ...item,
            price: Number(item.price) || 0,
            oldPrice: Number(item.oldPrice) || 0,
            discount: Number(item.discount) || 0,
            rating: Number(item.rating) || 0,
            stock: Number(item.stock) || 0,
            isBestSeller:
              item.isBestSeller === "true" || item.isBestSeller === true,
            isHot: item.isHot === "true" || item.isHot === true,
            isNew: item.isNew === "true" || item.isNew === true,
            isTrending: item.isTrending === "true" || item.isTrending === true,
            isLimitedStock:
              item.isLimitedStock === "true" || item.isLimitedStock === true,
            isExclusive:
              item.isExclusive === "true" || item.isExclusive === true,
            isFlashSale:
              item.isFlashSale === "true" || item.isFlashSale === true,
            images: item.images
              ? item.images.split(",").map((i) => i.trim())
              : [],
            extras: item.extras ? JSON.parse(item.extras) : {},
          }));

          // Update state
          setProducts((prev) => [...processedData, ...prev]);
          setDisplayProducts((prev) => [...processedData, ...prev]);

          alert(`${processedData.length} products uploaded successfully!`);
        } catch (err) {
          console.error("Error processing Excel data:", err);
          alert("Failed to process Excel file. Check the format.");
        }
      };

      reader.readAsArrayBuffer(file); // ✅ Call this AFTER setting onload
    } catch (e) {
      console.error("Error reading file:", e);
      alert("Failed to read file.");
    }
  };

  const handleExport = () => {
    let rows = [];

    if (active === "Products") {
      rows = displayProducts.map((product) => ({
        id: product.id,
        name: product.name,
        oldPrice: product.oldPrice ?? "",
        price: product.price ?? "",
        discount: product.discount ?? "",
        rating: product.rating ?? "",
        isBestSeller: product.isBestSeller ? "true" : "false",
        isHot: product.isHot ? "true" : "false",
        isNew: product.isNew ? "true" : "false",
        isTrending: product.isTrending ? "true" : "false",
        isLimitedStock: product.isLimitedStock ? "true" : "false",
        isExclusive: product.isExclusive ? "true" : "false",
        isFlashSale: product.isFlashSale ? "true" : "false",
        category: product.category,
        subcategory: product.subcategory,
        description: product.description,
        stock: product.stock,
        images: product.images?.join(", "), // convert array to comma-separated string
        extras: JSON.stringify(product.extras, null, 2), // prettify nested object
        createdAt: new Date(product.createdAt).toLocaleString(),
      }));
    }

    if (active === "Orders")
      rows = orders.map(({ items, ...rest }) => ({
        ...rest,
        items_count: items.length,
      }));

    if (active === "Payments") rows = payments;
    if (active === "Reports") {
      // Export filtered orders for report
      if (!filteredOrdersForReport.length)
        return alert("No report data to export");

      rows = filteredOrdersForReport.map((order) => ({
        id: order.orderId,
        customer: order.customer,
        total: order.total,
        status: order.status,
        date: order.date,
        items_count: order.items?.length || 0,
        // Optional: include revenue breakdown per order
        revenue: order.total,
      }));
    }

    if (!rows.length) return alert("Nothing to export for this section");

    // ✅ Create Excel workbook
    const wb = XLSX.utils.book_new();

    // ✅ Convert data to sheet
    const ws = XLSX.utils.json_to_sheet(rows);

    // ✅ Optional: Set column width automatically
    const colWidths = Object.keys(rows[0]).map((key) => ({
      wch: Math.max(key.length, 20),
    }));
    ws["!cols"] = colWidths;

    // ✅ Add sheet to workbook
    XLSX.utils.book_append_sheet(wb, ws, active);

    // ✅ Save Excel file
    XLSX.writeFile(wb, `${active}_export.xlsx`);
  };

  function generatePaymentQR() {
    alert("QR generation stub — integrate provider API to make this live");
  }

  // Settings save handlers
  function savePaymentSettings() {
    alert("Payment settings saved (stub)");
  }
  function saveProfileSettings() {
    alert("Profile saved (stub)");
  }
  function saveNotificationSettings() {
    alert("Notification settings saved (stub)");
  }
  function saveSecurity() {
    if (!oldPassword) return alert("Enter old password");
    if (oldPassword !== oldPasswordStored)
      return alert("Old password is incorrect (stub)");
    if (newPassword.length < 6) return alert("New password must be >= 6 chars");
    if (newPassword !== confirmPassword)
      return alert("Password confirmation does not match");
    alert("Password updated (stub)");
    setOldPassword("");
    setNewPassword("");
    setConfirmPassword("");
  }
  function revenueBreakdown(list) {
    const map = {};
    list.forEach((o) => {
      (o.items || []).forEach((it) => {
        const prod = sampleProducts().find((p) => p.id === it.productId) || {};
        const cat = prod.category || "Other";
        map[cat] = (map[cat] || 0) + (it.qty || 1) * (it.price || 0);
      });
    });
    if (Object.keys(map).length === 0)
      map["Other"] = list.reduce((a, b) => a + (b.total || 0), 0);
    const palette = ["#FF0055", "#FF7F50", "#FFD700", "#7DD3FC", "#A78BFA"];
    return Object.keys(map).map((k, i) => ({
      label: k,
      value: map[k],
      color: palette[i % palette.length],
    }));
  }

  const calculateRevenue = (orders) => {
    return orders
      .filter((o) => o.status !== "Cancelled")
      .reduce((sum, order) => sum + order.total, 0);
  };
  const totalRevenue = useMemo(() => calculateRevenue(orders), [orders]);

  const calculateSalesData = (orders) => {
    const data = {};
    const today = new Date().toISOString().substring(0, 10);
    const oneWeekAgo = new Date(Date.now() - 7 * 24 * 60 * 60 * 1000)
      .toISOString()
      .substring(0, 10);

    orders
      .filter((o) => o.status !== "Cancelled")
      .forEach((order) => {
        const date = order.date;
        if (date >= oneWeekAgo && date <= today) {
          data[date] = (data[date] || 0) + order.total;
        }
      });
    const chartData = [];
    for (let i = 6; i >= 0; i--) {
      const date = new Date(Date.now() - i * 24 * 60 * 60 * 1000)
        .toISOString()
        .substring(0, 10);
      chartData.push({
        date: new Date(date).toLocaleDateString("en-US", {
          day: "numeric",
          month: "short",
        }),
        revenue: data[date] || 0,
      });
    }
    return chartData;
  };
  const salesData = useMemo(() => calculateSalesData(orders), [orders]);
  const handleProfileSave = (e) => {
    e && e.preventDefault();
    setShowEditProfile(false);
    alert("Profile updated");
  };
  // ----- Profile helpers -----
  const handleAvatarChange = (e) => {
    const file = e.target.files && e.target.files[0];
    if (file) {
      const url = URL.createObjectURL(file);
      setUser((prev) => ({ ...prev, avatar: url }));
    }
  };

  return (
    <div className="min-h-screen bg-gray-50 text-gray-800 font-sans">
      <div className="flex ">
        <div className="hidden lg:flex">
          <Sidebar
            user={user}
            active={active}
            setActive={setActive}
            products={displayProducts}
            orders={orders}
            payments={payments}
            items={[
              "Dashboard",
              "Products",
              "Orders",
              "Inventory",
              "Payments",
              "Reports",
              "My Account",
              "Settings",
            ]}
          />
        </div>
        <div className=" flex-1">
          <Drawer
            user={user}
            activeTab={active}
            setActiveTab={setActive}
            notifications={notifications}
            products={displayProducts}
            orders={orders}
            payments={payments}
            items={[
              "Dashboard",
              "Products",
              "Orders",
              "Inventory",
              "Payments",
              "Reports",
              "My Account",
              "Settings",
            ]}
          >
            <main className=" xl:p-6 lg:p-6 md:p-6 sm:p-4 p-3">
              <div className="flex flex-col lg:flex-row lg:items-center lg:justify-between gap-4 mb-6">
                {/* Left: Page Title */}
                <h1 className="xl:text-2xl lg:text-2xl md:text-2xl sm:text-xl text-lg font-bold order-1 lg:order-1">
                  {active}
                </h1>

                {/* Right: Buttons + Admin */}
                <div className="flex flex-wrap items-center gap-3 order-2 lg:order-2">
                  {active !== "Dashboard" &&
                    active !== "My Account" &&
                    active !== "Settings" &&
                    active !== "FlashSale" && (
                      <>
                        {active === "Products" && (
                          <>
                            <input
                              ref={fileRef}
                              type="file"
                              accept=".xlsx, .xls"
                              className="hidden"
                              onChange={handleBulkUpload}
                            />

                            <button
                              onClick={() =>
                                fileRef.current && fileRef.current.click()
                              }
                              className="btn  border-none rounded shadow bg-[#00C853] hover:bg-[#00B34A] text-white sm:text-base text-[14px]"
                            >
                              Bulk Upload
                            </button>
                          </>
                        )}
                        <ExportBtn exportBtnHandler={handleExport} />
                      </>
                    )}
                </div>
              </div>
              <DashboardView
                active={active}
                products={displayProducts}
                orders={orders}
                inventory={inventory}
                salesData={salesData}
              />
              <ProductsView
                active={active}
                products={displayProducts}
                setProducts={setProducts}
                setDisplayProducts={setDisplayProducts}
                selectedProductIds={selectedProductIds}
                setSelectedProductIds={setSelectedProductIds}
                toggleSelectProduct={toggleSelectProduct}
                bulkDeleteProducts={bulkDeleteProducts}
                openNewProductModal={openNewProductModal}
                openEditProductModal={openEditProductModal}
                productSearch={productSearch}
                setProductSearch={setProductSearch}
                productSort={productSort}
                setProductSort={setProductSort}
                productPage={productPage}
                setProductPage={setProductPage}
                productPageSize={productPageSize}
                filteredProducts={filteredProducts}
                paginatedProducts={paginatedProducts}
              />
              <OrdersView
                active={active}
                orders={orders}
                setOrders={setOrders}
                returns={returns}
                setReturns={setReturns}
                selectedOrderIds={selectedOrderIds}
                setSelectedOrderIds={setSelectedOrderIds}
                toggleSelectOrder={toggleSelectOrder}
                orderSearch={orderSearch}
                setOrderSearch={setOrderSearch}
                orderSort={orderSort}
                setOrderSort={setOrderSort}
                orderPage={orderPage}
                setOrderPage={setOrderPage}
                orderPageSize={orderPageSize}
                filteredOrders={filteredOrders}
                paginatedOrders={paginatedOrders}
                returnOrderSearch={returnOrderSearch}
                setReturnOrderSearch={setReturnOrderSearch}
                filteredReturnOrders={filteredReturnOrders}
                paginatedReturnOrders={paginatedReturnOrders}
                returnOrderPage={returnOrderPage}
                setReturnOrderPage={setReturnOrderPage}
                returnOrderPageSize={returnOrderPageSize}
              />
              <InventoryView
                active={active}
                inventory={inventory}
                setInventory={setInventory}
                setDisplayInventory={setDisplayInventory}
                inventorySearch={inventorySearch}
                setInventorySearch={setInventorySearch}
                inventorySort={inventorySort}
                setInventorySort={setInventorySort}
                inventoryPage={inventoryPage}
                setInventoryPage={setInventoryPage}
                inventoryPageSize={inventoryPageSize}
                filteredInventory={filteredInventory}
                paginatedInventory={paginatedInventory}
              />
              <PaymentsView
                active={active}
                filteredPayments={filteredPayments}
                paginatedPayments={paginatedPayments}
                paymentSearch={paymentSearch}
                setPaymentSearch={setPaymentSearch}
                paymentSort={paymentSort}
                setPaymentSort={setPaymentSort}
                paymentPage={paymentPage}
                setPaymentPage={setPaymentPage}
                paymentPageSize={paymentPageSize}
              />
              <ReportsView
                active={active}
                totalRevenue={totalRevenue}
                products={displayProducts}
                reportFilter={reportFilter}
                setReportFilter={setReportFilter}
              />
              <MyProfileView
                user={user}
                setShowEditProfile={setShowEditProfile}
                activeTab={active}
              />
              <SettingsView
                active={active}
                bankSettings={bankSettings}
                setBankSettings={setBankSettings}
                bdSettings={bdSettings}
                setBdSettings={setBdSettings}
                profile={profile}
                setProfile={setProfile}
                notifications={notifications}
                setNotifications={setNotifications}
                oldPassword={oldPassword}
                setOldPassword={setOldPassword}
                newPassword={newPassword}
                setNewPassword={setNewPassword}
                confirmPassword={confirmPassword}
                setConfirmPassword={setConfirmPassword}
                twoFA={twoFA}
                setTwoFA={setTwoFA}
                loginAlert={loginAlert}
                setLoginAlert={setLoginAlert}
                savePaymentSettings={savePaymentSettings}
                saveProfileSettings={saveProfileSettings}
                saveNotificationSettings={saveNotificationSettings}
                saveSecurity={saveSecurity}
                generatePaymentQR={generatePaymentQR}
              />
            </main>
          </Drawer>
        </div>
      </div>

      {/* Edit Profile Modal */}
      <EditProfileModal
        user={user}
        setUser={setUser}
        showEditProfile={showEditProfile}
        setShowEditProfile={setShowEditProfile}
        handleProfileSave={handleProfileSave}
        handleAvatarChange={handleAvatarChange}
      />

      {productModalOpen && (
        <ProductModal
          user={user}
          product={editingProduct}
          onClose={() => setProductModalOpen(false)}
          onSave={saveProduct}
        />
      )}
    </div>
  );
}
